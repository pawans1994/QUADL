;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Jess Production Rules for a Cognitive Tutor
;;
;; This file was automatically generated by a Simulated Student.
;; Date of creation: July 28, 2015 09:11:03 AM
;;
;; PSLC/CTAT Simulated Student Project, 2005, 2006
;; Carnegie Mellon University
;;

;; Removing a following line will jeopardize the tutor's model tracing
;; capability
;; 
;; You may need to add similar statements if you wish to add your own
;; predicates and operator symbols.  See
;; http://herzberg.ca.sandia.gov/jess/docs/70/extending.html for details
;; 
(load-package digt_1_3.UserDefSymbols)

;; ----------------
;; Production rules
;; ----------------

(defrule conT

?var205546 <- (problem  (interface-elements ? ? ?var205547)   )
?var205547 <- (table  (columns $?m205573 ?var205560 $?))
?var205560 <- (column  (cells ?var205561 ? ? ? ?)  )
?var205561 <- (cell (name ?foa0) (value ?val0&~nil)   )

?var205546a <- (problem  (interface-elements ? ? ?var205547)   )
?var205547a <- (table  (columns $?m205587 ?var205560 $?))
?var205560a <- (column  (cells $?m205586 ?var205563 $?)  )
?var205563 <- (cell (name ?foa1) (value ?val1&~nil)   )

?var205546b <- (problem  (interface-elements ? ? ?var205547)   )
?var205547b <- (table  (columns ?var205548 ? ? ?))
?var205548 <- (column  (cells $?m205596 ?var205551 $?)  )
?var205551 <- (cell  (name ?selection) (value ?input&nil)   )

(test (same-column ?var205561 ?var205563))
(test (same-row ?var205563 ?var205551))

(test (is-conjunction ?val0 ) )
(test (is-true ?val1 ) )

=>

(bind ?input (truth_assignment_11))
(bind ?properName (get-interface-name ?selection))    
(here-is-the-list-of-foas ?foa0 ?foa1)
(model-trace-input ?selection UpdateTextArea ?input )
(construct-message
"[ For " ?properName ", you need to find truth values for p and q such that the truth values for all of p &#124; q, p &amp; q and p =&gt; q is 1.]"
"[ 0 0: Consider the given truth value for p &#124; q;
 0 1: Consider the given truth value for p &amp; q;
 1 0: Consider the given truth value for p =&gt; q.]"
"[ Since the given truth value for p &amp; q is 1, both variable must be true.]"
"[ Enter " ?input " in " ?properName ".]")
(modify ?var205551 (value ?*sInput*))

)

(defrule impF

?var211498 <- (problem  (interface-elements ? ? ?var211499)   )
?var211499 <- (table  (columns $?m211525 ?var211518 $?))
?var211518 <- (column  (cells ?var211519 ? ? ? ?)  )
?var211519 <- (cell (name ?foa0) (value ?val0&~nil)   )

?var211498a <- (problem  (interface-elements ? ? ?var211499)   )
?var211499a <- (table  (columns $?m211539 ?var211518 $?))
?var211518a <- (column  (cells $?m211538 ?var211523 $?)  )
?var211523 <- (cell (name ?foa1) (value ?val1&~nil)   )

?var211498b <- (problem  (interface-elements ? ? ?var211499)   )
?var211499b <- (table  (columns ?var211500 ? ? ?))
?var211500 <- (column  (cells $?m211548 ?var211505 $?)  )
?var211505 <- (cell  (name ?selection) (value ?input&nil)   )

(test (same-column ?var211519 ?var211523))
(test (same-row ?var211523 ?var211505))

(test (is-implication ?val0 ) )
(test (not (is-true ?val1 )) )

=>

(bind ?input (truth_assignment_10))
(bind ?properName (get-interface-name ?selection))    
(here-is-the-list-of-foas ?foa0 ?foa1)
(model-trace-input ?selection UpdateTextArea ?input )
(construct-message "[ For " ?properName ", you need to find truth values for p and q such that the truth values for p &#124; q is 1, but the truth values for for p =&gt; q and p &amp; q are 0.]"
"[ 0 0: Consider the given truth value for p &#124; q;
 0 1: Consider the given truth value for p =&gt; q;
 1 1: Consider the given truth value for p &amp; q.]"
"[ Since the given truth value for p &#124; q  is 1, at least one of the variables is true. Since the truth value for p &amp; q is 0 at least one must be false; hence, exactly one is true and exactly one is false. The condition for p =&gt; q determines which.]"
"[ Enter " ?input " in " ?properName ".]")
 (modify ?var211505 (value ?*sInput*))
)


(defrule done

?var222232 <- (problem  (interface-elements ? ? ?var222233)   )
?var222233 <- (table  (columns ?var222234 ? ? ?))
?var222234 <- (column  (cells ? ?var222236 ? ? ?)  )
?var222236 <- (cell (name ?foa0) (value ?val0&~nil)   )

?var222232a <- (problem  (interface-elements ? ? ?var222233)   )
?var222233a <- (table  (columns ?var222234 ? ? ?))
?var222234a <- (column  (cells ? ? ?var222237 ? ?)  )
?var222237 <- (cell (name ?foa1) (value ?val1&~nil)   )

?var222232b <- (problem  (interface-elements ? ? ?var222233)   )
?var222233b <- (table  (columns ?var222234 ? ? ?))
?var222234b <- (column  (cells ? ? ? ?var222238 ?)  )
?var222238 <- (cell (name ?foa2) (value ?val2&~nil)   )

?var222232c <- (problem  (interface-elements ? ? ?var222233)   )
?var222233c <- (table  (columns ?var222234 ? ? ?))
?var222234c <- (column  (cells ? ? ? ? ?var222239)  )
?var222239 <- (cell (name ?foa3) (value ?val3&~nil)   )

(test (same-column ?var222236 ?var222239))
(test (same-column ?var222236 ?var222237))
(test (same-column ?var222236 ?var222238))
(test (same-column ?var222237 ?var222239))
(test (same-column ?var222237 ?var222238))
(test (same-column ?var222238 ?var222239))

(test (not (eq ?val0 ?val1 )) )
(test (not (eq ?val0 ?val2 )) )
(test (not (eq ?val1 ?val2 )) )
(test (not (eq ?val0 ?val3 )) )
(test (not (eq ?val1 ?val3 )) )
(test (not (eq ?val2 ?val3 )) )

=>
(here-is-the-list-of-foas ?foa0 ?foa1 ?foa2 ?foa3)
(model-trace-input done ButtonPressed -1 )
(construct-message "[ You are done.  Press the done button.]")
(modify ?var222232 (done TRUE))

)


(defrule disF

?var228258 <- (problem  (interface-elements ? ? ?var228259)   )
?var228259 <- (table  (columns $?m228285 ?var228266 $?))
?var228266 <- (column  (cells ?var228267 ? ? ? ?)  )
?var228267 <- (cell (name ?foa0) (value ?val0&~nil)   )

?var228258a <- (problem  (interface-elements ? ? ?var228259)   )
?var228259a <- (table  (columns $?m228299 ?var228266 $?))
?var228266a <- (column  (cells $?m228298 ?var228270 $?)  )
?var228270 <- (cell (name ?foa1) (value ?val1&~nil)   )

?var228258b <- (problem  (interface-elements ? ? ?var228259)   )
?var228259b <- (table  (columns ?var228260 ? ? ?))
?var228260 <- (column  (cells $?m228308 ?var228264 $?)  )
?var228264 <- (cell  (name ?selection) (value ?input&nil)   )

(test (same-column ?var228267 ?var228270))
(test (same-row ?var228270 ?var228264))

(test (is-disjunction ?val0 ) )
(test (not (is-true ?val1 )) )

=>

(bind ?input (truth_assignment_00))
(bind ?properName (get-interface-name ?selection)) 
(here-is-the-list-of-foas ?foa0 ?foa1)
(model-trace-input ?selection UpdateTextArea ?input )
(construct-message "[ For " ?properName ", you need to find truth values for p and q such that the truth values for p &#124; q and for p &amp; q is 0, but the truth value for p =&gt; q is 1.]"
"[ Consider the given truth value for p &#124; q.]"
"[ Because of the given truth value for p &#124; q both variables must be false.]"
"[ Enter " ?input " in " ?properName ".]")
(modify ?var228264 (value ?*sInput*))
 
)


(defrule all

?var221900 <- (problem  (interface-elements ? ? ?var221901)   )
?var221901 <- (table  (columns ? ?var221908 ? ?))
?var221908 <- (column  (cells ?var221909 ? ? ? ?)  )
?var221909 <- (cell (name ?foa0) (value ?val0&~nil)   )

?var221900a <- (problem  (interface-elements ? ? ?var221901)   )
?var221901a <- (table  (columns ? ? ?var221914 ?))
?var221914 <- (column  (cells ?var221915 ? ? ? ?)  )
?var221915 <- (cell (name ?foa1) (value ?val1&~nil)   )

?var221900b <- (problem  (interface-elements ? ? ?var221901)   )
?var221901b <- (table  (columns ? ? ? ?var221920))
?var221920 <- (column  (cells ?var221921 ? ? ? ?)  )
?var221921 <- (cell (name ?foa2) (value ?val2&~nil)   )

?var221900c <- (problem  (interface-elements ? ? ?var221901)   )
?var221901c <- (table  (columns ? ?var221908 ? ?))
?var221908c <- (column  (cells $?m221962 ?var221910 $?)  )
?var221910 <- (cell (name ?foa3) (value ?val3&~nil)   )

?var221900d <- (problem  (interface-elements ? ? ?var221901)   )
?var221901d <- (table  (columns ? ? ?var221914 ?))
?var221914d <- (column  (cells $?m221974 ?var221916 $?)  )
?var221916 <- (cell (name ?foa4) (value ?val4&~nil)   )

?var221900e <- (problem  (interface-elements ? ? ?var221901)   )
?var221901e <- (table  (columns ? ? ? ?var221920))
?var221920e <- (column  (cells $?m221986 ?var221922 $?)  )
?var221922 <- (cell (name ?foa5) (value ?val5&~nil)   )

?var221900f <- (problem  (interface-elements ? ? ?var221901)   )
?var221901f <- (table  (columns ?var221902 ? ? ?))
?var221902 <- (column  (cells $?m221998 ?var221904 $?)  )
?var221904 <- (cell  (name ?selection) (value ?input&nil)   )

(test (same-row ?var221909 ?var221915))
(test (same-row ?var221909 ?var221921))
(test (same-column ?var221909 ?var221910))
(test (same-row ?var221915 ?var221921))
(test (same-column ?var221915 ?var221916))
(test (same-column ?var221921 ?var221922))
(test (same-row ?var221910 ?var221904))
(test (same-row ?var221910 ?var221916))
(test (same-row ?var221910 ?var221922))
(test (same-row ?var221916 ?var221904))
(test (same-row ?var221916 ?var221922))
(test (same-row ?var221922 ?var221904))

(test (or
  (and
    (not (eq ?val0 ?val1 )) 
    (not (eq ?val0 ?val2 )) 
    (not (eq ?val1 ?val2 )) 
    (is-true ?val3 ) 
    (not (eq ?val4 ?val5 )) 
    (not (is-conjunction ?val0 )) 
  )
  (and
    (eq ?val4 ?val5 )
    (is-conjunction ?val0 )
    (is-true ?val4 )
    (is-false ?val3 )
    (not (eq ?val0 ?val1 )) 
    (not (eq ?val0 ?val2 ))
  )
))

=>

(bind ?input (truth_assignment_01))
(bind ?properName (get-interface-name ?selection)) 
(here-is-the-list-of-foas ?foa0 ?foa1 ?foa2 ?foa3 ?foa4 ?foa5)
(model-trace-input ?selection UpdateTextArea ?input )
(construct-message "[ For " ?properName ", you need to find truth values for p and q such that the truth values for p &#124; q  and for p =&gt; q is 1, but the truth value for p &amp; q is 0.]"
"[ 0 0: Consider the given truth value for p &#124; q;
1 0: Consider the given truth value for p =&gt; q;
1 1: Consider the given truth value for p &amp; q.]"
"[ Since the given truth value for p &#124; q  is 1, at least one of the variables is true. Since the truth value for p &amp; q is 0 at least one must be false; hence, exactly one is true and exactly one is false. The condition for p =&gt; q determines which.]"
"[ Enter " ?input " in " ?properName ".]")
(modify ?var221904 (value ?*sInput*))
)
