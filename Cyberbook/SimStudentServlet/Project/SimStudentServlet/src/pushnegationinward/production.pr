;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Jess Production Rules for a Cognitive Tutor
;;
;; This file was automatically generated by a Simulated Student.
;; Date of creation: July 12, 2015 08:32:37 PM
;;
;; PSLC/CTAT Simulated Student Project, 2005, 2006
;; Carnegie Mellon University
;;

;; Removing a following line will jeopardize the tutor's model tracing
;; capability
;; 
;; You may need to add similar statements if you wish to add your own
;; predicates and operator symbols.  See
;; http://herzberg.ca.sandia.gov/jess/docs/70/extending.html for details
;; 
(load-package pushnegationinward.UserDefSymbols)

;; ----------------
;; Production rules
;; ----------------

(defrule demorgan-con

?var48 <- (problem  (interface-elements ? ? ? ?var51 ? ? ?)   )
?var51 <- (textField (name ?foa0) (value ?val0&~nil))

?var48a <- (problem  (interface-elements ? ? ? ? ? ?var52 ?)   )
?var52 <- (textField  (name ?selection) (value ?input&nil))

(test (is-step-1 ?var51 ?var52))

(test (is-negation-on-conjunction ?val0 ) )

=>

(bind ?val1 (get-all-but-first ?val0))    
(bind ?input (demorganization-con ?val1))
(bind ?input2 (replace-ampersand ?input))
    
(here-is-the-list-of-foas ?foa0)
(model-trace-input ?selection UpdateTextField ?input )
(bind ?properName (get-interface-name ?selection))    
(construct-message "[ For" ?properName ", you need to eliminate the negated conjunction from the given formula.]"
"[ A negated conjuction can be written in terms of a disjunction.]"
"[ The negated conjunction ~(p &amp; q) is equivalent to ~p &#124; ~q.]"
"[ Enter " ?input2 " in " ?properName ".]")
 (modify ?var52 (value ?*sInput*))
    
)


(defrule rm-double-negation

?var16 <- (problem  (interface-elements $?m22 ?var20 $?)   )
?var20 <- (textField (name ?foa0) (value ?val0&~nil))

?var16a <- (problem  (interface-elements $?m23 ?var21 $?)   )
?var21 <- (textField  (name ?selection) (value ?input&nil))


(test (not (is-simplified ?val0 )) )

=>

(bind ?input (rm-double-negation ?val0))
(bind ?input2 (replace-ampersand ?input))
(here-is-the-list-of-foas ?foa0)
(model-trace-input ?selection UpdateTextField ?input )
(bind ?properName (get-interface-name ?selection))    
(construct-message "[ For" ?properName ", you need to eliminate the double negation from the given formula.]"
"[ Two negations cancel each other out.]"
"[ The double negation ~~p is equivalent to p.]"
"[ Enter " ?input2 " in " ?properName ".]")
(modify ?var21 (value ?*sInput*))
    
)


(defrule done

?var72 <- (problem  (interface-elements ? ? ? ? ? ?var76 ?)   )
?var76 <- (textField (name ?foa0) (value ?val0&~nil))

?var72a <- (problem  (interface-elements ? ? ? ? ? ? ?var77)   )
?var77 <- (textField (name ?foa1) (value ?val1))

(test (is-step-2 ?var76 ?var77))

(test
 (or
  (and
    (not (is-simplified ?val1 ))
    (is-simplified ?val0 )
    (not (can-move-not-inward ?val0 ))
  )
  (and
    (not (is-simplified ?val0 ))
    (is-simplified ?val1 )
    (not (can-move-not-inward ?val1 ))
  )
))

=>

(here-is-the-list-of-foas ?foa0 ?foa1)
(model-trace-input done ButtonPressed -1 )
(construct-message "[ You are done.  Press the done button.]")
(modify ?var72 (done TRUE))
     
)


(defrule demorgan-dis

?var32 <- (problem  (interface-elements ? ? ? ?var35 ? ? ?)   )
?var35 <- (textField (name ?foa0) (value ?val0&~nil))

?var32a <- (problem  (interface-elements ? ? ? ? ? ?var36 ?)   )
?var36 <- (textField  (name ?selection) (value ?input&nil))

(test (is-step-1 ?var35 ?var36))

(test (is-negation-on-disjunction ?val0 ) )

=>

(bind ?val1 (get-all-but-first ?val0))
(bind ?input (demorganization-dis ?val1))
(bind ?input2 (replace-ampersand ?input))  
    
(here-is-the-list-of-foas ?foa0)
(model-trace-input ?selection UpdateTextField ?input )
(bind ?properName (get-interface-name ?selection))    
(construct-message "[ For" ?properName ", you need to eliminate the negated disjunction from the given formula.]"
"[ A negated disjunction can be written in terms of a conjunction.]"
"[ The negated disjunction ~(p &#124; q) is equivalent to ~p &amp; ~q.]"
"[ Enter " ?input2 " in " ?properName ".]")
 (modify ?var36 (value ?*sInput*))
    
)


