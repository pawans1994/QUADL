;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Jess Production Rules for a Cognitive Tutor
;;
;; This file was automatically generated by a Simulated Student.
;; Date of creation: July 12, 2015 06:33:55 PM
;;
;; PSLC/CTAT Simulated Student Project, 2005, 2006
;; Carnegie Mellon University
;;

;; Removing a following line will jeopardize the tutor's model tracing
;; capability
;; 
;; You may need to add similar statements if you wish to add your own
;; predicates and operator symbols.  See
;; http://herzberg.ca.sandia.gov/jess/docs/70/extending.html for details
;; 
(load-package rmconnective.UserDefSymbols)

;; ----------------
;; Production rules
;; ----------------

(defrule rm-xor-connective

?var916 <- (problem  (interface-elements ? ? ? ? ? ?var920 ? ? ?)   )
?var920 <- (textField (name ?foa0) (value ?val0&~nil))

?var916a <- (problem  (interface-elements ? ? ?var919 ? ? ? ? ? ?)   )
?var919 <- (textField (name ?foa1) (value ?val1&~nil))

?var916b <- (problem  (interface-elements ? ? ? ? ? ? ?var921 ? ?)   )
?var921 <- (textField (name ?foa2) (value ?val2&~nil))

?var916c <- (problem  (interface-elements ? ? ? ? ? ? ? ?var922 ?)   )
?var922 <- (textField  (name ?selection) (value ?input&nil))

(test (is-step-1 ?var919 ?var922))

(test (is-xor-connective ?val1 ) )

=>

(bind ?input (rm-xor-connective ?val0 ?val2))
(bind ?input2 (replace-ampersand ?input))
   
(here-is-the-list-of-foas ?foa0 ?foa1 ?foa2)
(model-trace-input ?selection UpdateTextField ?input )
(bind ?properName (get-interface-name ?selection))    
(construct-message "[ For" ?properName ", you need to eliminate the exclusive or from the given formula.]"
"[ Write an exclusive or p ⊕ q in terms of &#124;, &amp;, and ~.]"
"[ The exclusive or p ⊕ q is equivalent to (~p &amp; q) &#124; (p &amp; ~q).]"
"[ Enter " ?input2 " in " ?properName ".]")
(modify ?var922 (value ?*sInput*))
)


(defrule rm-double-neg

?var594 <- (problem  (interface-elements ? ? ? ? ? ? ? ?var600 ?)   )
?var600 <- (textField (name ?foa0) (value ?val0&~nil))

?var594a <- (problem  (interface-elements ? ? ? ? ? ? ? ? ?var601)   )
?var601 <- (textField  (name ?selection) (value ?input&nil))


(test (not (is-simplified ?val0 )) )

=>

(bind ?input (rm-double-negation ?val0))
(bind ?input2 (replace-ampersand ?input))    
(here-is-the-list-of-foas ?foa0)
(model-trace-input ?selection UpdateTextField ?input )
(bind ?properName (get-interface-name ?selection))    
(construct-message "[ For" ?properName ", you need to eliminate the double negation from the given formula.]"
"[ Two negations cancel each other out.]"
"[ The double negation ~~p is equivalent to p.]"
"[ Enter " ?input2 " in " ?properName ".]")
 (modify ?var601 (value ?*sInput*))
    
)


(defrule rm-imp-connective

?var796 <- (problem  (interface-elements ? ? ? ? ? ?var800 ? ? ?)   )
?var800 <- (textField (name ?foa0) (value ?val0&~nil))

?var796a <- (problem  (interface-elements ? ? ?var799 ? ? ? ? ? ?)   )
?var799 <- (textField (name ?foa1) (value ?val1&~nil))

?var796b <- (problem  (interface-elements ? ? ? ? ? ? ?var801 ? ?)   )
?var801 <- (textField (name ?foa2) (value ?val2&~nil))

?var796c <- (problem  (interface-elements ? ? ? ? ? ? ? ?var802 ?)   )
?var802 <- (textField  (name ?selection) (value ?input&nil))

(test (is-step-1 ?var799 ?var802))

(test (is-implication-connective ?val1 ) )

=>

(bind ?input (rm-implication-connective ?val0 ?val2))
(bind ?input2 (replace-ampersand ?input))
    
(here-is-the-list-of-foas ?foa0 ?foa1 ?foa2)
(model-trace-input ?selection UpdateTextField ?input )
(bind ?properName (get-interface-name ?selection))    
(construct-message "[ For" ?properName ", you need to eliminate the implication from the given formula.]"
"[ Write an implication p =&gt; q in terms of &#124; and ~; and simplify one of the terms.]"
"[ The implication p =&gt; q is equivalent to ~p &#124; q.]"
"[ Enter " ?input2 " in " ?properName ".]")
    
(modify ?var802 (value ?*sInput*))

)


(defrule rm-biimp-connective

?var844 <- (problem  (interface-elements ? ? ? ? ? ?var848 ? ? ?)   )
?var848 <- (textField (name ?foa0) (value ?val0&~nil))

?var844a <- (problem  (interface-elements ? ? ?var847 ? ? ? ? ? ?)   )
?var847 <- (textField (name ?foa1) (value ?val1&~nil))

?var844b <- (problem  (interface-elements ? ? ? ? ? ? ?var849 ? ?)   )
?var849 <- (textField (name ?foa2) (value ?val2&~nil))

?var844c <- (problem  (interface-elements ? ? ? ? ? ? ? ?var850 ?)   )
?var850 <- (textField  (name ?selection) (value ?input&nil))

(test (is-step-1 ?var847 ?var850))

(test (is-biimplication-connective ?val1 ) )

=>

(bind ?input (rm-biimplication-connective ?val0 ?val2))
(bind ?input2 (replace-ampersand ?input))
(here-is-the-list-of-foas ?foa0 ?foa1 ?foa2)   
(model-trace-input ?selection UpdateTextField ?input )
(bind ?properName (get-interface-name ?selection))    
(construct-message "[ For" ?properName ", you need to eliminate the biimplication from the given formula.]"
"[ Write a biimplication p &lt;=&gt; q in terms of &#124;, &amp;, and ~ (think about two implications).]"
"[ The biimplication p &lt;=&gt; q is equivalent to (p &amp; q) &#124; (~p &amp; ~q).]"
"[ Enter " ?input2 " in " ?properName ".]")
 (modify ?var850 (value ?*sInput*))
    
)


(defrule done

?var958 <- (problem  (interface-elements ? ? ? ? ? ? ? ?var964 ?)   )
?var964 <- (textField (name ?foa0) (value ?val0&~nil))

?var958a <- (problem  (interface-elements ? ? ? ? ? ? ? ? ?var965)   )
?var965 <- (textField (name ?foa1) (value ?val1))

(test (or
    (is-simplified ?val0 )
    (is-simplified ?val1 ) 
))

=>

(here-is-the-list-of-foas ?foa0 ?foa1)
(model-trace-input done ButtonPressed -1 )
(construct-message "[ You are done.  Press the done button.]")
(modify ?var958 (done TRUE))
    
)


