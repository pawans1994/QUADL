var theclock = getTimer();var tutorobjects = new Array();var inited = false;var questionText = "question";//this.currentY = 250;var	hintText = new Array();var	feedback = new Array();				// add listener to  correct answer to display close button.var correctBtnListener:Object = new Object();correctBtnListener.click = function(evt:Object) {	//if ((MTcorrect[0] !=undefined) and (MTcorrect[0] !="")) {			//after doing message wipe it out		trace("message for correct response="+_root.MTCorrect[0]+"  "+_root.MTCorrect[1]);		_root[_root.MTCorrect[0]].sendmessage(params);		_root.MTCorrect[0]= "";	//}   	_root.nextbutton._visible = true;};var incorrectBtnListener:Object = new Object();incorrectBtnListener.click = function(evt:Object) {	trace("message for Incorrect response="+_root.MTInCorrect[0]+"  "+_root.MTInCorrect[1]);	//if (MTIncorrect[0] !=undefined) {		_root[_root.MTInCorrect[0]].sendmessage(params);		_root.MTInCorrect[0]= "";	//}   	_root.nextbutton._visible = true;};/*function hideMTutor() {	logitem("closeTutor","name="+tutors[currentScene]+"&ident="+this.saveMyTutorObj.questestinterop.item.ident);	trace("hideMTutor called tutorobjects="+tutorobjects);	shell._visible=false;	border._visible=false;	radio1._visible=false;	radio2._visible=false;	radio3._visible=false;	radio4._visible=false;	submit._visible=false;	closeBtn._visible = false;	playSwf._visible=true;	for (item in tutorobjects)	{		tutorobjects[item]._visible = false;		trace(">>>>>hiding "+tutorobjects[item]);	}}*/function showMTutor() {//	_root.animask.close();	border._visible = true;	shell._visible=true;	radio1._visible=true;	radio2._visible=true;	radio3._visible=true;	radio4._visible=true;	submit._visible=true;	playSwf._visible=false;	for (item in tutorobjects)	{		tutorobjects[item]._visible = true;	}}function resetMTutor() {	//trace("resetMTutor called");	   // reset shell   shell.CloseFeedbackWindow();   shell.CloseHintWindow();      // reset radio buttons   for (button in radioButtons) {       radioButtons[button].showNull();       radioButtons[button].selected = false;       radioButtons[button].isCorrect = false;       radioButtons[button].IsTheCorrectAnswer = false;       radioButtons[button].CorrectAnswerFeedback = "";       radioButtons[button].IncorrectAnswerFeedback = "";       radioButtons[button].Hints = new Array();	   radioButtons[button].removeEventListener("click", incorrectBtnListener);	   radioButtons[button].removeEventListener("click", correctBtnListener);   }   	_root.animask.close();	border._visible = false;	shell._visible=false;	radio1._visible=false;	radio2._visible=false;	radio3._visible=false;	radio4._visible=false;	radio1._y = 1000;	radio2._y = 1000;	radio3._y = 1000;	radio4._y = 1000;	submit._visible=true;	playSwf._visible=false;	for (item in tutorobjects)	{		//trace(" >>>>>>>>>>>>resetMtutor  about to delete="+tutorobjects[item]);		thisobject = tutorobjects[item];		tutorobjects[item].removeTextField(); //this is necessary to remove the text fields created for Q&answers		delete tutorobjects[item]; //this removes them from the array	}	answerText = new Array();	answerOrder = new Array();	hintText = new Array();	feedback = new Array();	shell.findNewFocus();}function buildMTutor() {tutorScene = currentScene;resetMTutor();questionText = tutorXML.saveMyTutorObj.questestinterop.item.presentation.material.mattext._value;// set answer valuesnumberOfAnswers = tutorXML.saveMyTutorObj.questestinterop.item.presentation.response_lid.render_choice.response_label.length;//trace("numberOfAnswers="+numberOfAnswers);for (i=1; i<tutorXML.saveMyTutorObj.questestinterop.item.presentation.response_lid.render_choice.response_label.length+1;i++){this["myAnswer"+i+"Text"] = tutorXML.saveMyTutorObj.questestinterop.item.presentation.response_lid.render_choice.response_label[i-1].material.mattext._value;answerText.push(this["myAnswer"+i+"Text"]);answerOrder.push("text");}// set correct answer, hints, feedback, skillscorrectButton = 0;//trace("resprocessing.respcondition.length="+tutorXML.saveMyTutorObj.questestinterop.item.resprocessing.respcondition.length);for (i=0; i<tutorXML.saveMyTutorObj.questestinterop.item.resprocessing.respcondition.length;i++){//trace("correct score="+tutorXML.saveMyTutorObj.questestinterop.item.resprocessing.respcondition[i].setvar._value+"  i="+i);	if (tutorXML.saveMyTutorObj.questestinterop.item.resprocessing.respcondition[i].setvar._value>0) 	{		correctButton = i+1	}}	for (i=0;i<tutorXML.saveMyTutorObj.questestinterop.item.itemfeedback.length;i++) 	{		if (tutorXML.saveMyTutorObj.questestinterop.item.itemfeedback[i]["ident"]=="hint")		{			for (j=0;j<tutorXML.saveMyTutorObj.questestinterop.item.itemfeedback[i].hint.hintmaterial.length;j++)			{				hintText.push(tutorXML.saveMyTutorObj.questestinterop.item.itemfeedback[i].hint.hintmaterial[j].material.mattext._value);			}				}		if (tutorXML.saveMyTutorObj.questestinterop.item.itemfeedback[i]["ident"].indexOf("FeedBack")!=-1) {			feedback.push(tutorXML.saveMyTutorObj.questestinterop.item.itemfeedback[i].material.mattext._value);			//trace("showing feedback="+tutorXML.saveMyTutorObj.questestinterop.item.itemfeedback[i].material.mattext._value);		}			};skillText = "";// Diana - I use this along with a height-check function later on to see if there's more // content in the xml file than I want to display.  If the height of all the content// would be over 600, the tutor throws an error.allowableDocumentHeight = 250;// this is used to set the heights of the radio buttons later onanswerY = new Array();	// Make sure the init only ever runs once.	if (!inited) {		// Note that we've initialized the tutor.		//inited = true; always re-initialize		shell.WidgetOrder = new Array("radio1","radio2","radio3","radio4");		radioButtons = new Array(radio1,radio2,radio3,radio4);		tutorobjects = radioButtons;					setPosition();		}}function setPosition() {	var newobject:Object = new Object();i=0;		newobject = createTextField("questionTextbox"+i, 100+i, 10, 55, 275, 21); //240,260		tutorobjects.push(newobject);		_root["questionTextbox"+i].multiline = true;		_root["questionTextbox"+i].wordWrap = true;		_root["questionTextbox"+i].background = false;		_root["questionTextbox"+i].border = false;		_root["questionTextbox"+i].html = true;		_root["questionTextbox"+i].autoSize = true;		nodeFormat = new TextFormat();		nodeFormat.size = 12;		nodeFormat.font = "_sans";		_root["questionTextbox"+i].setNewTextFormat(nodeFormat);		_root["questionTextbox"+i].htmlText = "<font face='_sans'>" + questionText + "</font>";		currentY = newobject._height+70 ; //60;		//trace("question="+currentY);		endOfQuestionY = currentY;	for (i=0; i<answerText.length; i++) {			answerY[i] = 1000; //reset this			newobject = createTextField("answerTextbox"+i, 200+i, 15, 300, 300, 21);			tutorobjects.push(newobject);			//trace("??????TUTOR OBJECTS="+newobject);			newobject.multiline = true;			newobject.wordWrap = true;			newobject.background = false;			newobject.border = false;			newobject.html = true;			newobject.autoSize = true;			nodeFormat = new TextFormat();			nodeFormat.size = 12;			nodeFormat.font = "_sans";			newobject.setNewTextFormat(nodeFormat);			newobject._x = 25;			newobject._y = 20*i+60;//k			newobject.htmlText = "<font face='_sans'>" + answerText[i] + "</font>";			newobject._y = currentY;			prevObjHeight = newobject._height;			answerY[i] = currentY;			currentY = currentY + newobject._height+10;			//trace("i="+i+" currentY="+currentY+"  newobject._x = "+newobject._x);	}	// set y values for radio buttons	radio1._y = answerY[0];	radio2._y = answerY[1];	radio3._y = answerY[2];	radio4._y = answerY[3];		radio1._x = 10;	radio2._x = 10;	radio3._x = 10;	radio4._x = 10;		// check height of the tutor movie	flashMovieHeight = currentY+80;	shell.TutorHeight = 445; //256; //currentY+80;	documentHeight = currentY+80;;		// assign content to radio button widgets		for (i=0; i<radioButtons.length; i++) {			theButtonNumber = radioButtons[i]._name.substring(5, 6);			if (theButtonNumber == correctButton) {				radioButtons[i].IsTheCorrectAnswer = true;				radioButtons[i].addEventListener("click", correctBtnListener); 				radioButtons[i].CorrectAnswerFeedback = feedback[i];			} else {				radioButtons[i].IncorrectAnswerFeedback = feedback[i];				radioButtons[i].addEventListener("click", incorrectBtnListener); 			}			radioButtons[i].Hints = hintText;			radioButtons[i].Skill = skillText;		}		// must call findNewFocus in order to get the shell to recognize the new hints we just set		shell.findNewFocus();		/*// When the close button is clicked, call _root.Advance.var closeBtnListener:Object = new Object();closeBtnListener.click = function(evt:Object) {	trace("close button clicked");	closeBtn.removeEventListener;   evt.target._parent.Advance();};closeBtn.addEventListener("click", closeBtnListener); */}function LoadTutor() {	this.saveMyTutorObj = tutorXML.object;	//trace(">>>>>>>>>loadTutor"+"   ,   "+"name="+tutors[currentScene]+"&ident="+this.saveMyTutorObj.questestinterop.item.ident);	   	logitem("loadTutor","name="+tutors[currentScene]+"&ident="+this.saveMyTutorObj.questestinterop.item.ident);	buildMTutor();	showMTutor();}