//_root.LoggingLibraryPath = "../webcontent/CommLoggingLibrary.swf";/*************************************************************************************	Sample Movie using the Logging Library*	This movie demonstrates how to use the logging library (CommLoggingLibrary.swf)*	to log tutor data to PSLC log server.**	The logging library is a .SWF file that is loaded into the tutor.  It contains*	methods that can be called to log.  This sample includes all the code you will*	need to write logging calls with the library, including loading the library.  **	The general steps for using the library to log are:*	1) Load the logging library using loadMovie*	2) Optionally call startProblem method from the library*	3) Log messages with the logging methods.**	The ActionScript in this sample is meant to be extended or rewritten to suit your *	individual logging needs.*	A JavaDoc is available that provides details about the API of the logging library.**	Documenation and Resources*	http://ctat.pact.cs.cmu.edu/tiki-index.php?page=Logging+with+the+CTAT+Logging+Library+for+Flash*	http://ctat.pact.cs.cmu.edu/tiki-index.php?page=CTAT_FlashPublish*	http://ctat.pact.cs.cmu.edu/tiki-index.php?page=Logging%20and%20Learning%20Curves*	http://ctat.pact.cs.cmu.edu/tiki-index.php?page=Flash*	*************************************************************************************//* * These variables are used to ensure that a logging session is established which is necessary when * not using OLI course delivery.  * Set usingOLI to 'true' if your tutor will run in the OLI course delivery system; otherwise* set it to 'false'.*/var usingOLI:Boolean = true;var sessionEstablished:Boolean = false;/* *  This variable is used in this script to determine when a new problem begins and *  thus initialize the logging of that problem.*  If you have more than one problem in a SWF, this needs to be false prior to starting a problem.*/var problemStarted:Boolean = true;/**  Load the logging library.  In this sample Movie, the path is defined in the flashvars*  parameter of the HTML Object tag.  The accompanying HTML file contains the necessary data.*  How does this work?  Well, Flash converts the flashvars to _root variables that are being referenced in the method call.  *  You can find more information about Macromedia Flash's flashvars parameters and the usage in tutors at *  http://ctat.pact.cs.cmu.edu/tiki-index.php?page=CTAT_FlashPublish.*/function loadLoggingLibrary(){	this.createEmptyMovieClip("LoggingLibrary_mc", 999);		if (_root.LoggingLibraryPath != undefined){		loadMovie(_root.LoggingLibraryPath, LoggingLibrary_mc);		trace("Logging library loaded.");	}}/**  Establish logging session.  A session is a way to group all the logging by one student in a period of time.*/function newSession(){	// Session is something OLI provides, but if you are logging outside of the OLI, this is needed. 	// This maps to the log_session_start element of the OLI logging DTD.		LoggingLibrary_mc.LogClass.simpleSessionLog(_root.log_service_url, a_root.uth_token, _root.session_id, _root.user_guid);	sessionEstablished = true;	trace("New session initialized.");}	/**  This method is used to initialize each problem and distinguish problems in the log.*  If you are loading multiple problems in a SWF then you should call this method (alt call startProblem directly).*  For this sample, the data parameters are defined in the flashvars parameter of the HTML Object tag.  *  The accompanying HTML file contains the necessary data.*  How does this work?  Well, Flash converts the flashvars to _root variables that are being referenced in the method call.*  These data could also be assigned in this frame script.  For example by reading them in through a remote method such as *  LoadVars, XML, remoting etc., providing flexibility to the developer.  Note, the underlying class also has a fallback*  for calling start problem with the _root variables.  Please see setProblemStarted, getProblemStarted, startProblem etc. *  in the JavaDoc API for details.  For more information on flashvars, see http://ctat.pact.cs.cmu.edu/tiki-index.php?page=CTAT_FlashPublish*/function newProblem(){	// startProblem should be called prior to each problem in a SWF.	LoggingLibrary_mc.LogClass.startProblem (_root.log_service_url, _root.question_file, _root.saveMyObj.TUTORIAL.thisTitle,  		_root.course_name, _root.unit_name,  _root.section_name,  _root.school_name, _root.user_guid,  		_root.session_id,  _root.container_id, _root.source_id,	_root.external_object_id, _root.auth_token);	trace(">>>>>newProblem called");	problemStarted = true;	}/**  Log a user interaction from any button*  Calling logAttempt  producing 1 log messages.  *  Note the generation of semantic IDs which are necessary parameters for the logAttempt and logResult methods.*/function logitem(myAction,myInput) {	// Set basic data to log.	var mySelection = "AnimationStageStep";	trace(">>>>>>>Logging " + myAction+"   ="+myInput );		// Call an initialization method for the problem.	if (problemStarted == false) {newProblem()}		 // Call logAttempt and logResult separately, which produces two log messages.  CTAT Pseudo Tutors take this approach.	 // Use this technique if you separate input and assessment.  One reason to do this is to record intended Selection,	 // Action, and Input of an erroneous result.	 var myCommonSemanticEventID = LoggingLibrary_mc.LogClass.getGuid();		 LoggingLibrary_mc.LogClass.logAttempt (myCommonSemanticEventID, mySelection, myAction, myInput);	}/* ____________________________________________________________________________________________________________________________mySelection - tutor, text, swfmyActionmyInput"startTutorial" //wants to know the name of the tutorial and the xml file  This would be the same as newsession which does not record the name of the tutorial."recordLearningObjectives" // should send along a set of learning objectives for this tutorial"loadStep" 		//wants to know the name of the step and the name of the swf and offset"loadTutor" 	//wants to know the id and filename of the minitutor"closeTutor"	//wants to know the id and filename of the minitutor"exposeStepText" //wants to know step #"playSwf" 		 //wants to know name of swf*/loadLoggingLibrary();newSession();newProblem()