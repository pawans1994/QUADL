# Load the grades
# Tip: Press Ctrl+Enter on a line of code to execute it
grades <- read.csv("data.csv")
# Load the grades
# Tip: Press Ctrl+Enter on a line of code to execute it
grades <- read.csv("data.csv")
# Load the grades
# Tip: Press Ctrl+Enter on a line of code to execute it
grades <- read.csv("data.csv")
# Load the grades
# Tip: Press Ctrl+Enter on a line of code to execute it
grades <- read.csv("data.csv")
# Load the grades
# Tip: Press Ctrl+Enter on a line of code to execute it
grades <- read.csv("data.csv")
# Read the column names
names(grades)
# Load the grades
# Tip: Press Ctrl+Enter on a line of code to execute it
grades <- read.csv("data.csv")
# Load the grades
# Tip: Press Ctrl+Enter on a line of code to execute it
grades <- read.csv("data.csv")
# Load the grades
# Tip: Press Ctrl+Enter on a line of code to execute it
grades <- read.csv("\Users/pawan/Documents/RWorkspace/data.csv")
# Load the grades
# Tip: Press Ctrl+Enter on a line of code to execute it
grades <- read.csv("\Users\pawan\Documents\RWorkspace\data.csv")
# Load the grades
# Tip: Press Ctrl+Enter on a line of code to execute it
grades <- read.csv("data.csv")
# Load the grades
# Tip: Press Ctrl+Enter on a line of code to execute it
grades <- read.csv("\Users\pawan\Documents\RWorkspace\data.csv")
grades <- read.csv("\pawan\Documents\RWorkspace\data.csv")
# Load the grades
# Tip: Press Ctrl+Enter on a line of code to execute it
grades <- read.csv("/pawan/Documents/RWorkspace/data.csv")
# Load the grades
# Tip: Press Ctrl+Enter on a line of code to execute it
grades <- read.csv("/Users/pawan/Documents/RWorkspace/data.csv")
View(grades)
# A "Vector" is a sequence of data with the same type. Create one with c()
x <- c(1, 2, 3)
x
# We can also create a range of values with ":"
1:5
# Or using the "seq" function (notice that R can use "argumane=value" syntax)
seq(from = 1, to = 10, by = 2)
# Remember: You can figure out what arguments a function takes with "?"
?seq
# The dataframe columns that you retrieve with $ are also usually vectors,
# so we can easily calculate the average final grade of students:
mean(grades$Grade_Final)
# What do you think jitter will do?
plot(jitter(grades$Grade_Test1, 5), grades$Grade_Final)
# Get the Pearson correlation between the two values
# This tells you whether there's a linear relationship between the two
# columns. Test 1 grades are related to final grades (no surprise there!).
cor(grades$Grade_Test1, grades$Grade_Final)
# You can even apply comparison operators:
c(1, 2, 3) < c(6, 4, 2)
# You can also compare to a single value, and each element in the vector is compared:
c(1, 2, 3, 2, 5) == 2
# The result of a conparison is a boolean vectors
# These have their own operators, "&" (AND), "|" (OR):
x > 1             # which values are greater than 1
install.packages(c("corrplot", "Hmisc", "pacman"))
library(pacman)
(x > 1) & (x < 3) # which are both > 1 and < 3
# Vectors are always one-dimensional, so combining them will result in a new vector
c(x, 4)
# Or get the 1st, 3rd and 5th values:
x[c(1, 3, 5)]
# Subsetting dataframes requires two indices, but one index can be blank.
# The value before the comma is for selecting a subset of rows
grades[1, ]
# You can also specify a range:
firstFifty <- grades[1:50, ]
View(firstFifty)
# Now view firstFifty in the Environment tab
tail(firstFifty)
View(grades)
# If you're feeling ambitious, select both rows and columsn:
grades[1:3, c("Grade_Final", "Grade_Test1")]
# The result of a subset is still a dataframe, so you can get its columns with "$"
# This gets the first three values of Grade_H1:
grades[1:3, ]$Grade_H1
# The result of a subset is still a dataframe, so you can get its columns with "$"
# This gets the first three values of Grade_H1:
grades[1:3, ]$Grade_H1
# negative indices give you all rows except the given values.
# omit the first 2 rows:
grades[c(-1, -2),]
library(datasets)
data(iris)
iris[c(1:3, 51:53, 101:102)]
View(iris)
table(iris$Species)
summary(iris)
calculate_cosine <- function(p, q) {
# Input: p, q are numeric vectors of the same length
# output: a single value of type double, containing the cosine distance between p and q.
mod_p=sqrt(sum(p*p))
mod_q=sqrt(sum(q*q))
cosine_d=1-((sum(p*q))/(mod_p*mod_q))
return(cosine_d)
}
calculate_cosine(a,b)
a=c(1,3,4)
b=c(4,6,7)
calculate_cosine(a,b)
calculate_cosine(a,a)
calculate_cosine(b,b)
a=(1,2,3)
a=c(1,2,3)
calculate_cosine(a,a)
a=c(1,3,4)
calculate_cosine(a,a)
a=c(1,3,50)
calculate_cosine(a,a)
data.frame(
businessName = xml_find_first( business_nodes, ".//businessName" ) %>% xml_text(),
businessAddress = xml_find_first( business_nodes, ".//businessAddress" ) %>% xml_text(),
businessPostcode = xml_find_first( business_nodes, ".//businessPostcode" ) %>% xml_text(),
stringsAsFactors = FALSE )
data.frame(
question = xml_find_first( question_nodes, ".//body" ) %>% xml_text(),
#businessAddress = xml_find_first( business_nodes, ".//businessAddress" ) %>% xml_text(),
#businessPostcode = xml_find_first( business_nodes, ".//businessPostcode" ) %>% xml_text(),
stringsAsFactors = FALSE )
install.packages("https://CRAN.R-project.org/package=magrittr")
install.packages("magrittr")
install.packages("xml2")
xml2
data.frame(
question = xml_find_first( question_nodes, ".//body" ) %>% xml_text(),
#businessAddress = xml_find_first( business_nodes, ".//businessAddress" ) %>% xml_text(),
#businessPostcode = xml_find_first( business_nodes, ".//businessPostcode" ) %>% xml_text(),
stringsAsFactors = FALSE )
library( xml2 )
library( magrittr ) #for the pipe symbol
doc <- read_xml( "/Users/pawan/Documents/Project/statistics/content/_u2_summarizing_data/_m1_examining_distributions/_u2_m1_checkpoint1.xml")
question_nodes <- xml_find_all( doc, ".//multiple_choice" )
data.frame(
question = xml_find_first( question_nodes, ".//body" ) %>% xml_text(),
#businessAddress = xml_find_first( business_nodes, ".//businessAddress" ) %>% xml_text(),
#businessPostcode = xml_find_first( business_nodes, ".//businessPostcode" ) %>% xml_text(),
stringsAsFactors = FALSE )
doc <- read_xml( "/Users/pawan/Documents/Project/statistics/content/_u2_summarizing_data/_m1_examining_distributions/_u2_m1_checkpoint1.xml")
doc <- read_xml( /Users/pawan/Documents/Project/statistics/content/_u2_summarizing_data/_m1_examining_distributions/_u2_m1_checkpoint1.xml)
library( xml2 )
library( magrittr ) #for the pipe symbol
doc <- read_xml( Users/pawan/Documents/Project/statistics/content/_u2_summarizing_data/_m1_examining_distributions/_u2_m1_checkpoint1.xml)
question_nodes <- xml_find_all( doc, ".//multiple_choice" )
data.frame(
question = xml_find_first( question_nodes, ".//body" ) %>% xml_text(),
#businessAddress = xml_find_first( business_nodes, ".//businessAddress" ) %>% xml_text(),
#businessPostcode = xml_find_first( business_nodes, ".//businessPostcode" ) %>% xml_text(),
stringsAsFactors = FALSE )
library( xml2 )
library( magrittr ) #for the pipe symbol
doc <- read_xml( Users/pawan/Documents/Project/statistics/content/_u2_summarizing_data/_m1_examining_distributions/_u2_m1_checkpoint1.xml)
question_nodes <- xml_find_all( doc, ".//multiple_choice" )
data.frame(
question = xml_find_first( question_nodes, ".//body" ) %>% xml_text(),
#businessAddress = xml_find_first( business_nodes, ".//businessAddress" ) %>% xml_text(),
#businessPostcode = xml_find_first( business_nodes, ".//businessPostcode" ) %>% xml_text(),
stringsAsFactors = FALSE )
library( xml2 )
library( magrittr ) #for the pipe symbol
doc <- read_xml( Users/pawan/Documents/Project/statistics/content/_u2_summarizing_data/_m1_examining_distributions/_u2_m1_checkpoint1.xml)
doc <- read_xml( "Users/pawan/Documents/Project/statistics/content/_u2_summarizing_data/_m1_examining_distributions/_u2_m1_checkpoint1.xml")
pwd
getwd
getwd()
setwd()
setwd("Users/pawan/Documents/Project/statistics/content/_u2_summarizing_data/_m1_examining_distributions/")
setwd(Users/pawan/Documents/Project/statistics/content/_u2_summarizing_data/_m1_examining_distributions/)
setwd("Users/pawan/Documents/Project/statistics/content/_u2_summarizing_data/_m1_examining_distributions")
setwd("/Users/pawan/Documents/Project/statistics/content/_u2_summarizing_data/_m1_examining_distributions")
library( xml2 )
library( magrittr ) #for the pipe symbol
doc <- read_xml( "Users/pawan/Documents/Project/statistics/content/_u2_summarizing_data/_m1_examining_distributions/_u2_m1_checkpoint1.xml")
question_nodes <- xml_find_all( doc, ".//multiple_choice" )
data.frame(
question = xml_find_first( question_nodes, ".//body" ) %>% xml_text(),
#businessAddress = xml_find_first( business_nodes, ".//businessAddress" ) %>% xml_text(),
#businessPostcode = xml_find_first( business_nodes, ".//businessPostcode" ) %>% xml_text(),
stringsAsFactors = FALSE )
library( xml2 )
library( magrittr ) #for the pipe symbol
doc <- read_xml( "Users/pawan/Documents/Project/statistics/content/_u2_summarizing_data/_m1_examining_distributions/_u2_m1_checkpoint1.xml")
doc <- read_xml( "_u2_m1_checkpoint1.xml")
library( xml2 )
library( magrittr ) #for the pipe symbol
doc <- read_xml( "x-oli-assessment2/_u2_m1_checkpoint1.xml")
question_nodes <- xml_find_all( doc, ".//multiple_choice" )
data.frame(
question = xml_find_first( question_nodes, ".//body" ) %>% xml_text(),
#businessAddress = xml_find_first( business_nodes, ".//businessAddress" ) %>% xml_text(),
#businessPostcode = xml_find_first( business_nodes, ".//businessPostcode" ) %>% xml_text(),
stringsAsFactors = FALSE )
View(question_nodes)
View(question_nodes)
View(question_nodes)
View(question_nodes)
View(question_nodes)
View(question_nodes)
write.csv(question_nodes,./new.csv, row.names = FALSE)
write.csv(question_nodes,./new.csv, row.names = FALSE)
View(question_nodes)
View(question_nodes)
library( xml2 )
library( magrittr ) #for the pipe symbol
doc <- read_xml( "x-oli-assessment2/_u2_m1_checkpoint1.xml")
question_nodes <- xml_find_all( doc, ".//multiple_choice" )
data.frame(
question = xml_find_first( question_nodes, ".//body" ) %>% xml_text(),
#businessAddress = xml_find_first( business_nodes, ".//businessAddress" ) %>% xml_text(),
#businessPostcode = xml_find_first( business_nodes, ".//businessPostcode" ) %>% xml_text(),
stringsAsFactors = FALSE )
write.csv(question_nodes,./new.csv, row.names = FALSE)
library( xml2 )
library( magrittr ) #for the pipe symbol
doc <- read_xml( "x-oli-assessment2/_u2_m1_checkpoint1.xml")
question_nodes <- xml_find_all( doc, ".//multiple_choice" )
data.frame(
question = xml_find_first( question_nodes, ".//body" ) %>% xml_text(),
#businessAddress = xml_find_first( business_nodes, ".//businessAddress" ) %>% xml_text(),
#businessPostcode = xml_find_first( business_nodes, ".//businessPostcode" ) %>% xml_text(),
stringsAsFactors = FALSE )
write.csv(question_nodes,./new.csv)
write.csv(question_nodes,new.csv)
write.csv(question_nodes,new.csv)
write.csv(question_nodes,new.csv)
