;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Jess Production Rules for a Cognitive Tutor
;;
;; This file was automatically generated by a Simulated Student.
;; Date of creation: July 28, 2015 05:28:07 AM
;;
;; PSLC/CTAT Simulated Student Project, 2005, 2006
;; Carnegie Mellon University
;;

;; Removing a following line will jeopardize the tutor's model tracing
;; capability
;; 
;; You may need to add similar statements if you wish to add your own
;; predicates and operator symbols.  See
;; http://herzberg.ca.sandia.gov/jess/docs/70/extending.html for details
;; 
(load-package informallogic.UserDefSymbols)

;; ----------------
;; Production rules
;; ----------------

(defrule con_connective

?var503 <- (problem  (interface-elements $?m517 ?var513 $?)   )
?var513 <- (textField (name ?foa0) (value ?val0&~nil))

?var503a <- (problem  (interface-elements $?m518 ?var506 $?)   )
?var506 <- (textField (name ?foa1) (value ?val1&~nil))

?var503b <- (problem  (interface-elements $?m519 ?var507 $?)   )
?var507 <- (textField  (name ?selection) (value ?input&nil))

(test (same-column ?var513 ?var507))
(test (previous-column ?var513 ?var506))

(test (is-conjunction-connective ?val0 ) )

=>

(bind ?input (conjunction-connective))
(here-is-the-list-of-foas ?foa0 ?foa1)
(model-trace-input ?selection UpdateTextField ?input )
(bind ?properName (get-interface-name ?selection))    
(construct-message "[ For" ?properName ", find the right connective.]"
"[ The connective should express the notion of 'and'.]"
"[ The connective is '&amp;'.]"
"[ Enter &amp; in " ?properName ".]")
 (modify ?var507 (value ?*sInput*))
    
)


(defrule ap0

?var554 <- (problem  (interface-elements ? ? ? ? ? ? ? ? ? ? ?var563 ? ? ? ?)   )
?var563 <- (textField (name ?foa0) (value ?val0&~nil))

?var554a <- (problem  (interface-elements ? ? ?var557 ? ? ? ? ? ? ? ? ? ? ? ?)   )
?var557 <- (textField  (name ?selection) (value ?input&nil))

(test (same-column ?var563 ?var557))

(test (is-atomic-proposition ?val0 ) )

=>

(bind ?input (copy ?val0))
(here-is-the-list-of-foas ?foa0)
(model-trace-input ?selection UpdateTextField ?input )
(bind ?properName (get-interface-name ?selection))    
(construct-message "[ For" ?properName ", find the right propositional variable.]"
"[ There are 3 propositional variables in the given assertion; select one of them.]"
"[ The propositional variable is " ?input ".]"
"[ Enter " ?input " in " ?properName ".]") 
(modify ?var557 (value ?*sInput*))       

)


(defrule dis_connective

?var621 <- (problem  (interface-elements $?m635 ?var631 $?)   )
?var631 <- (textField (name ?foa0) (value ?val0&~nil))

?var621a <- (problem  (interface-elements $?m636 ?var624 $?)   )
?var624 <- (textField (name ?foa1) (value ?val1&~nil))

?var621b <- (problem  (interface-elements $?m637 ?var625 $?)   )
?var625 <- (textField  (name ?selection) (value ?input&nil))

(test (same-column ?var631 ?var625))
(test (previous-column ?var631 ?var624))

(test (is-disjunction-connective ?val0 ) )

=>

(bind ?input (disjunction-connective))
(here-is-the-list-of-foas ?foa0 ?foa1)
(model-trace-input ?selection UpdateTextField ?input )
(bind ?properName (get-interface-name ?selection))    
(construct-message "[ For" ?properName ", find the right connective.]"
"[ The connective should express the notion of 'or'.]"
"[ The connective is '&#124;'.]"
"[ Enter &#124; in " ?properName ".]")
(modify ?var625 (value ?*sInput*))
    
)


(defrule imp_connective

?var469 <- (problem  (interface-elements $?m483 ?var479 $?)   )
?var479 <- (textField (name ?foa0) (value ?val0&~nil))

?var469a <- (problem  (interface-elements $?m484 ?var472 $?)   )
?var472 <- (textField (name ?foa1) (value ?val1&~nil))

?var469b <- (problem  (interface-elements $?m485 ?var473 $?)   )
?var473 <- (textField  (name ?selection) (value ?input&nil))

(test (same-column ?var479 ?var473))
(test (previous-column ?var479 ?var472))

(test (is-implication-connective ?val0 ) )

=>

(bind ?input (implication-connective))
(here-is-the-list-of-foas ?foa0 ?foa1)
(model-trace-input ?selection UpdateTextField ?input )
(bind ?properName (get-interface-name ?selection))    
(construct-message "[ For" ?properName ", find the right connective.]"
"[ The connective should express the notion of 'implication'.]"
"[ The connective is '=&gt;'.]"
"[ Enter =&gt; in " ?properName ".]")
(modify ?var473 (value ?*sInput*))
    
)

(defrule ap

?var537 <- (problem  (interface-elements $?m551 ?var548 $?)   )
?var548 <- (textField (name ?foa0) (value ?val0&~nil))

?var537a <- (problem  (interface-elements $?m552 ?var541 $?)   )
?var541 <- (textField (name ?foa1) (value ?val1&~nil))

?var537b <- (problem  (interface-elements $?m553 ?var542 $?)   )
?var542 <- (textField  (name ?selection) (value ?input&nil))

(test (same-column ?var548 ?var542))
(test (previous-column ?var548 ?var541))

(test (is-atomic-proposition ?val0 ) )

=>

(bind ?input (copy ?val0))
(here-is-the-list-of-foas ?foa0 ?foa1)
(model-trace-input ?selection UpdateTextField ?input )
(bind ?properName (get-interface-name ?selection))    
(construct-message "[ For" ?properName ", find the right propositional variable.]"
"[ There are 3 propositional variables in the given assertion; select one of them.]"
"[ The propositional variable is " ?input ".]"
"[ Enter " ?input " in " ?properName ".]")        
(modify ?var542 (value ?*sInput*))
    
)


(defrule done

?var885 <- (problem  (interface-elements ? ? ?var888 ? ? ? ? ? ? ? ? ? ? ? ?)   )
?var888 <- (textField (name ?foa0) (value ?val0&~nil))

?var885a <- (problem  (interface-elements ? ? ? ?var889 ? ? ? ? ? ? ? ? ? ? ?)   )
?var889 <- (textField (name ?foa1) (value ?val1&~nil))

?var885b <- (problem  (interface-elements ? ? ? ? ?var890 ? ? ? ? ? ? ? ? ? ?)   )
?var890 <- (textField (name ?foa2) (value ?val2&~nil))

?var885c <- (problem  (interface-elements ? ? ? ? ? ?var891 ? ? ? ? ? ? ? ? ?)   )
?var891 <- (textField (name ?foa3) (value ?val3&~nil))

?var885d <- (problem  (interface-elements ? ? ? ? ? ? ?var892 ? ? ? ? ? ? ? ?)   )
?var892 <- (textField (name ?foa4) (value ?val4&~nil))

=>

(here-is-the-list-of-foas ?foa0 ?foa1 ?foa2 ?foa3 ?foa4)
(model-trace-input done ButtonPressed -1 )
(construct-message "[ You are done.  Press the done button.]")
(modify ?var885 (done TRUE))
      
)


(defrule biimp_connective

?var587 <- (problem  (interface-elements $?m601 ?var597 $?)   )
?var597 <- (textField (name ?foa0) (value ?val0&~nil))

?var587a <- (problem  (interface-elements $?m602 ?var590 $?)   )
?var590 <- (textField (name ?foa1) (value ?val1&~nil))

?var587b <- (problem  (interface-elements $?m603 ?var591 $?)   )
?var591 <- (textField  (name ?selection) (value ?input&nil))

(test (same-column ?var597 ?var591))
(test (previous-column ?var597 ?var590))

(test (is-biimplication-connective ?val0 ) )

=>

(bind ?input (biimplication-connective))
(here-is-the-list-of-foas ?foa0 ?foa1)
(model-trace-input ?selection UpdateTextField ?input )
(bind ?properName (get-interface-name ?selection))    
(construct-message "[ For" ?properName ", find the right connective.]"
"[ The connective should express the notion of 'if and only if', and is called biimplication.]"
"[ The connective is '&lt;=&gt;'.]"
"[ Enter &lt;=&gt; in " ?properName ".]")
(modify ?var591 (value ?*sInput*))
    
)

